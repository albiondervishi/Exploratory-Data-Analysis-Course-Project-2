hist(data(),
main=paste('r', dist, '(', n, ')', sep=''))
})
# Generate a summary of the data
output$summary <- renderPrint({
summary(data())
})
# Generate an HTML table view of the data
output$table <- renderTable({
data.frame(x=data())
})
})
checkboxInput("smooth", "Smooth"),
conditionalPanel(
condition = "input.smooth == true",
selectInput("smoothMethod", "Method",
list("lm", "glm", "gam", "loess", "rlm"))
)
checkboxInput("smooth", "Smooth"),
conditionalPanel(
condition = "input.smooth == true",
selectInput("smoothMethod", "Method",
list("lm", "glm", "gam", "loess", "rlm"))
)
shinyServer(function(input, output) {
output$plotOut <- renderPlot({
hist(faithful$eruptions, breaks = as.numeric(input$nBreaks))
if (input$individualObs)
rug(faithful$eruptions)
})
output$tableOut <- renderTable({
if (input$individualObs)
faithful
else
NULL
})
})
shinyServer(function(input, output) {
output$plotOut <- renderPlot({
hist(faithful$eruptions, breaks = as.numeric(input$nBreaks))
if (input$individualObs)
rug(faithful$eruptions)
})
output$tableOut <- renderTable({
if (input$individualObs)
faithful
else
NULL
})
})
shinyServer(function(input, output) {
# OK, as long as this is called from the reactive world:
currentFib <- function() {
fib(as.numeric(input$n))
}
output$nthValue <- renderText({ currentFib() })
})
install.packages("proto")
install.packages("grid")
install.packages("reshape")
install.packages("plyr")
install.packages("digest")
install.packages("digest")
shuffle <- function(cards) {  random <- sample(1:52, size = 52) cards[random, ]}
shuffle <- function(cards) {random <- sample(1:52, size = 52) cards[random, ]}
shuffle <- function(cards) {    random <- sample(1:52, size = 52) cards[random, ]}
cards
deck2[c(13, 26, 39, 52), 3]
w>010 < x & x < 20y == "February"all(z %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday",             "Saturday", "Sunday"))
vec <- c(1, 2, 3, NA) is.na(vec)
vec <- c(1, 2, 3, NA) is.na(vec)
vec <- c(1, 2, 3, NA)
is.na(vec)
roll <- function() {  die <- 1:6  dice <- sample(die, size = 2, replace = TRUE) sum(dice)}
get_symbols <- function() {  wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0") sample(wheel, size = 3, replace = TRUE,                                                           prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))}
get_symbols <- function() {  wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")   sample(wheel, size = 3, replace = TRUE,                                                                    prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))}
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols()
get_symbols()
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
play <- function() { symbols <- get_symbols() print(symbols) score(symbols)}
num <- 4if (num < 0) { num <- num * -1}
num <- 4if (num < 0) { num <- num * -1}
num <- 4if (num < 0) {     num <- num * -1}
x <- 1if (3 == 3) {  x <- 2 }
x <- 1if (3 == 3)   {  x <- 2 }
x <- 1if (3 == 3)   {  x <- 2 }
if (same) {  symbol <- symbols[1] if (symbol == "DD") {    prize <- 800  } else if (symbol == "7") {    prize <- 80  } else if (symbol == "BBB") {    prize <- 40  } else if (symbol == "BB") {    prize <- 5  } else if (symbol == "B") {    prize <- 10  } else if (symbol == "C") {    prize <- 10  } else if (symbol == "0") {    prize <- 0
if (same) {symbol <- symbols[1] if (symbol == "DD") {    prize <- 800  } else if (symbol == "7") {    prize <- 80  } else if (symbol == "BBB") {    prize <- 40  } else if (symbol == "BB") {    prize <- 5  } else if (symbol == "B") {    prize <- 10  } else if (symbol == "C") {    prize <- 10  } else if (symbol == "0") {    prize <- 0
if (same) {symbol <- symbols[1] if (symbol == "DD") {    prize <- 800  } else if (symbol == "7") {    prize <- 80  } else if (symbol == "BBB") {    prize <- 40  } else if (symbol == "BB") {    prize <- 5  } else if (symbol == "B") {    prize <- 10  } else if (symbol == "C") {    prize <- 10  } else if (symbol == "0") {    prize <- 0
if (same) {symbol <- symbols[1] if (symbol == "DD") {    prize <- 800  } else if (symbol == "7") {    prize <- 80  }
deal <- function() { deck[1, ]}
shuffle <- function(cards) {     random <- sample(1:52, size = 52) cards[random, ]}
abs_loop <- function(vec){ for (i in 1:length(vec)) {    if (vec[i] < 0) { vec[i] <- -vec[i]    } }    vec}
change_symbols <- function(vec){ for (i in 1:length(vec)){  if (vec[i] == "DD") { vec[i] <- "joker"  } else if (vec[i] == "C") { vec[i] <- "ace"  } else if (vec[i] == "7") { vec[i] <- "king"  }else if (vec[i] == "B") { vec[i] <- "queen"  } else if (vec[i] == "BB") { vec[i] <- "jack"  } else if (vec[i] == "BBB") { vec[i] <- "ten"  } else {    vec[i] <- "nine"  } }  vec}
ggplot(csub, aes(x=Year, y=Anomaly10y, fill=pos)) +    geom_bar(stat="identity", position="identity", colour="black", size=0.25) +    scale_fill_manual(values=c("#CCEEFF", "#FFDDDD"), guide=FALSE)
barplot(rain, ylim = c(0, 35), names = month,        main = "Rainfall", xlab = "Month", ylab = "Rainfall in mm")
barplot(height, width = 1, space = NULL,        names.arg = NULL, legend.text = NULL, beside = FALSE,        horiz = FALSE, density = NULL, angle = 45,        col = NULL, border = par("fg")        main = NULL, sub = NULL, xlab = NULL, ylab = NULL,        xlim = NULL, ylim = NULL,        cex.axis = par("cex.axis"), cex.names = par("cex.axis"),        plot = TRUE, add = FALSE, args.legend = NULL, ...)
barplot(height, width = 1, space = NULL,        names.arg = NULL, legend.text = NULL, beside = FALSE,        horiz = FALSE, density = NULL, angle = 45,        col = NULL, border = par("fg")        main = NULL, sub = NULL, xlab = NULL, ylab = NULL,        xlim = NULL, ylim = NULL,        cex.axis = par("cex.axis"), cex.names = par("cex.axis"),        plot = TRUE, add = FALSE, args.legend = NULL, ...)
data(VADeaths)
barplot(VADeaths, xlab = "Deaths per 1000", horiz = TRUE)
barplot(VADeaths, xlab = "Deaths per 1000", vert = TRUE)
title(ylab = "Deaths per 1000", xlab = "Category")
barplot(VADeaths, xlab = "Deaths per 1000", horiz = TRUE)
title(ylab = "Deaths per 1000", xlab = "Category")
pdf("mygraph.pdf")attach(mtcars)plot(wt, mpg)abline(lm(mpg~wt))title("Regression of MPG on Weight")detach(mtcars)dev.off()
dev.off()
mtcars
plot(wt, mpg)abline(lm(mpg~wt))title("Regression of MPG on Weight")
plot(wt, mpg)
attach(mtcars)
plot(wt, mpg)abline(lm(mpg~wt))title("Regression of MPG on Weight")
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
help(dev.cur)
require(ggpot2)
require(ggplot2)
library(car)scatterplot(mpg ~ wt | cyl, data=mtcars, lwd=2,)main="Scatter Plot of MPG vs. Weight by # Cylinders",xlab="Weight of Car (lbs/1000)",ylab="Miles Per Gallon",legend.plot=TRUE,id.method="identify",labels=row.names(mtcars),boxplots="xy"
xyplot
install.packages("playwith")
install.packages("playwith")
library("playwith")
install.packages("iplots")
library("iplots")
install.packages("rJava")
library("iplots")
roll <- function() {  die <- 1:6  dice <- sample(die, size = 2, replace = TRUE) sum(dice)}
roll1 <- function() {  die <- 1:6  dice <- sample(die, size = 2, replace = TRUE) sum(dice)}
roll1 <- function() {  dice <- 1:6  dice <- sample(die, size = 2, replace = TRUE) sum(dice)}
roll1 <- function() {  dice <- 1:6  dice <- sample(die, size = 2, replace = TRUE)   sum(dice)}
roll <- function() {  die <- 1:6  dice <- sample(die, size = 2, replace = TRUE,                 prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))  sum(dice)}
deal <- function(cards) { cards[1, ]}
deal<- function(cards) { cards[1, ]}
deal<- function(cards) { cards[1, ]}
deal<- function(cards) { cards[1, ]                         }
deal<-function(cards){  cards[1, ]}
deal<-function(cards){  cards[1, ]}
deal<-function(cards){
cards[1, ]
}
deal
cards
cards()
deal(deck)
cards
deck[1, c("face", "suit", "value")]
deck[1, c("face", "suit", "value")]
deck[1,c("face", "suit", "value")]
quit()
x=function(a=1:6){
c=sum(a, size=2)
replace=TRUE
}
mean(c)
mean(3)
mean(8)
x=function(a=1:6){
c=mean(a)
replace=TRUE
}
print(c)
x<-function(a=1:6){
c=mean(a)
}
print(c)
x(3)
x<-function(a=1:20){
c=sample(a, size=3)
}
mean(c)
x<-function(a=1:20){
c=sample(a, size=3)
replace=TRUE
}
mean(c)
x(a)
x<-function(a=1:20){
c=sample(a, size=2)
replace=TRUE
}
mean(c)
x<-function(a=1:20){
c=sample(a, size=2)
replace=TRUE
mean(c) }
x(12)
x<-function(a=1:20){
c=sample(a, size=2)
mean(c) }
x(14)
x<-function(a=1:20){
c=sample(a, size=2)
sum(c) }
x<-function(a=1:20){
c=rnorm(a)
print(c) }
x(45)
x<-function(a=1:20){
c=sqrt(a)
print(c) }
x<-function(a){
c=sqrt(a)
print(c) }
x<-function(a){
c=sqrt(a)
print(c) }
x(54)
x<-function(a){
c=sqrt(a)
d=c+2+(sqrt(a))
print(d) }
x(4)
x<-function(a){
c=sqrt(a)
d=c+2+(sqrt(a))
if(d>a, d==a)
print(d) }
x<-function(a){
c=sqrt(a)
d=c+2+(sqrt(a))
if(d>a,)
print(d) }
x<-function(a){
c=sqrt(a)
d=c+2+(sqrt(a))
print(d) }
x<-function(a,b,c){
d=wide(a)
f=length(b)
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
print(h)
}
x(2,4,6)
x(2)
x<-function(a,b,c){
d=a
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
print(h)
}
x(2,4,6)
x(8,3,2)
x<-function(a,b,c){
d=a
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
sum(h)
}
x(8,3,2)
x<-function(a,b,c){
d=a
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(h)
print(r)
}
x(4,4,4)
x<-function(a,b,c){
d=a
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x(4,4,4)
x<-function(a,b,c){
d=a+ sum(o,p,i)
o<-c(3,4,5,67,8,9)
p<-c(3,4,5,3,4,2,12)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x(2,2,2)
x<-function(a,b,c){
d=a+ sum(o)
o<-c(3,4,5,67,8,9)
p<-c(3,4,5,3,4,2,12)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x(2,2,2)
x<-function(a,b,c){
d=a+ sum(o,p,i)
o<-(3,4,5,67,8,9)
p<-(3,4,5,3,4,2,12)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ sum(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x(2,2,2)
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else(d=i)(r=sum(f,g))
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else(d=i)(h=sum(d,f))
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else(d=i){(h=sum(d,f))}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
else(d=i){(h=sum(d,f))}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if(d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else (d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if (d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if (d>f){h=c/(a+b)}
while(d=f){(h=sqrt(a*b*c))}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
while(d=f){(h=sqrt(a*b*c))}
else if (d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
while(a!=b){(h=sqrt(a*b*c))}
else if (d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
x<-function(a,b,c){
d=a+ mean(3,4,5,67,8,9)
i=1:22
f=b
g=d*f
if(f>d){
h=c*(d+f)
}
else if (d>f){h=c/(a+b)}
r=rnorm(d)
print(r)
}
onenormrecursive = function(v){  n=length(v)  m=floor(n/2) if(n>1){    sum1 = onenormrecursive(v[1:m])    sum2 = onenormrecursive(v[(m+1):n])    sumvalue = sum1 + sum2  } else{    sumvalue = abs(v[1])  }  return(sumvalue)
onenormrecursive=function(v){  n=length(v)m=floor(n/2) if(n>1){sum1 = onenormrecursive(v[1:m])sum2 = onenormrecursive(v[(m+1):n])sumvalue = sum1 + sum2}else{sumvalue = abs(v[1])}return(sumvalue)
onenormrecursive=function(v){  n=length(v)m=floor(n/2) if(n>1){sum1 = onenormrecursive(v[1:m])sum2 = onenormrecursive(v[(m+1):n])sumvalue = sum1 + sum2}else{sumvalue = sqrt(v[1])}return(sumvalue)
onenormrecursive=function(v){  n=length(v)m=floor(n/2) if(n>1){sum1 = onenormrecursive(v[1:m])sum2 = onenormrecursive(v[(m+1):n])sumvalue = sum1 + sum2}else{sumvalue = sqrt(v[1])}return(sumvalue)
onenormrecursive=function(v){  n=(v)*2m=(n/2) if(n>1){sum1 = onenormrecursive(v[1:m])sum2 = onenormrecursive(v[(m+1):n])sumvalue = sum1 + sum2}else{sumvalue = sqrt(v[1])}return(sumvalue)
onenormrecursive=function(v){  n=(v)*2m=(n/2) if(n>1){sum1 = onenormrecursive(v[1:m])sum2 = onenormrecursive(v[(m+1):n])sumvalue = sum1 + sum2}else{sumvalue = sqrt(v[1])}return(sumvalue)
aa=function(v){  n=(v)*2m=(n/2) if(n>1){sum1 = aa(v[1:m])sum2 = aa(v[(m+1):n])sumvalue = sum1 + sum2}else{sumvalue = sqrt(v[1])}return(sumvalue)
aa=function(v){  n=v*2m=n/2 if(n>1){sum1 = aa(v[1:m])sum2 = aa(v[(m+1):n])sumvalue = sum1 + sum2}else{sumvalue = sqrt(v[1])}return(sumvalue)
